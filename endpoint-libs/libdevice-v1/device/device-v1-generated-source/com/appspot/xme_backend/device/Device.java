/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2014-02-14 18:40:25 UTC)
 * on 2014-02-25 at 03:00:37 UTC 
 * Modify at your own risk.
 */

package com.appspot.xme_backend.device;

/**
 * Service definition for Device (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link DeviceRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Device extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.16.0-rc of the device library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://xme-backend.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "device/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Device(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Device(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the DeviceOperations collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Device device = new Device(...);}
   *   {@code Device.DeviceOperations.List request = device.device().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public DeviceOperations device() {
    return new DeviceOperations();
  }

  /**
   * The "device" collection of methods.
   */
  public class DeviceOperations {

    /**
     * Create a request for the method "device.delete".
     *
     * This request holds the parameters needed by the the device server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param token
     * @param id
     * @return the request
     */
    public Delete delete(java.lang.String token, java.lang.Long id) throws java.io.IOException {
      Delete result = new Delete(token, id);
      initialize(result);
      return result;
    }

    public class Delete extends DeviceRequest<com.appspot.xme_backend.device.model.Message> {

      private static final String REST_PATH = "delete/{token}/{id}";

      /**
       * Create a request for the method "device.delete".
       *
       * This request holds the parameters needed by the the device server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param token
       * @param id
       * @since 1.13
       */
      protected Delete(java.lang.String token, java.lang.Long id) {
        super(Device.this, "DELETE", REST_PATH, null, com.appspot.xme_backend.device.model.Message.class);
        this.token = com.google.api.client.util.Preconditions.checkNotNull(token, "Required parameter token must be specified.");
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String token;

      /**

       */
      public java.lang.String getToken() {
        return token;
      }

      public Delete setToken(java.lang.String token) {
        this.token = token;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long id;

      /**

       */
      public java.lang.Long getId() {
        return id;
      }

      public Delete setId(java.lang.Long id) {
        this.id = id;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "device.list".
     *
     * This request holds the parameters needed by the the device server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param token
     * @return the request
     */
    public List list(java.lang.String token) throws java.io.IOException {
      List result = new List(token);
      initialize(result);
      return result;
    }

    public class List extends DeviceRequest<com.appspot.xme_backend.device.model.Message> {

      private static final String REST_PATH = "message/{token}";

      /**
       * Create a request for the method "device.list".
       *
       * This request holds the parameters needed by the the device server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param token
       * @since 1.13
       */
      protected List(java.lang.String token) {
        super(Device.this, "GET", REST_PATH, null, com.appspot.xme_backend.device.model.Message.class);
        this.token = com.google.api.client.util.Preconditions.checkNotNull(token, "Required parameter token must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String token;

      /**

       */
      public java.lang.String getToken() {
        return token;
      }

      public List setToken(java.lang.String token) {
        this.token = token;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Refresh collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Device device = new Device(...);}
   *   {@code Device.Refresh.List request = device.refresh().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Refresh refresh() {
    return new Refresh();
  }

  /**
   * The "refresh" collection of methods.
   */
  public class Refresh {

    /**
     * Create a request for the method "refresh.activation".
     *
     * This request holds the parameters needed by the the device server.  After setting any optional
     * parameters, call the {@link Activation#execute()} method to invoke the remote operation.
     *
     * @param token
     * @param id
     * @return the request
     */
    public Activation activation(java.lang.String token, java.lang.Long id) throws java.io.IOException {
      Activation result = new Activation(token, id);
      initialize(result);
      return result;
    }

    public class Activation extends DeviceRequest<com.appspot.xme_backend.device.model.Message> {

      private static final String REST_PATH = "refreshActivation/{token}/{id}";

      /**
       * Create a request for the method "refresh.activation".
       *
       * This request holds the parameters needed by the the device server.  After setting any optional
       * parameters, call the {@link Activation#execute()} method to invoke the remote operation. <p>
       * {@link
       * Activation#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param token
       * @param id
       * @since 1.13
       */
      protected Activation(java.lang.String token, java.lang.Long id) {
        super(Device.this, "POST", REST_PATH, null, com.appspot.xme_backend.device.model.Message.class);
        this.token = com.google.api.client.util.Preconditions.checkNotNull(token, "Required parameter token must be specified.");
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Activation setAlt(java.lang.String alt) {
        return (Activation) super.setAlt(alt);
      }

      @Override
      public Activation setFields(java.lang.String fields) {
        return (Activation) super.setFields(fields);
      }

      @Override
      public Activation setKey(java.lang.String key) {
        return (Activation) super.setKey(key);
      }

      @Override
      public Activation setOauthToken(java.lang.String oauthToken) {
        return (Activation) super.setOauthToken(oauthToken);
      }

      @Override
      public Activation setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Activation) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Activation setQuotaUser(java.lang.String quotaUser) {
        return (Activation) super.setQuotaUser(quotaUser);
      }

      @Override
      public Activation setUserIp(java.lang.String userIp) {
        return (Activation) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String token;

      /**

       */
      public java.lang.String getToken() {
        return token;
      }

      public Activation setToken(java.lang.String token) {
        this.token = token;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long id;

      /**

       */
      public java.lang.Long getId() {
        return id;
      }

      public Activation setId(java.lang.Long id) {
        this.id = id;
        return this;
      }

      @Override
      public Activation set(String parameterName, Object value) {
        return (Activation) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Update collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Device device = new Device(...);}
   *   {@code Device.Update.List request = device.update().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Update update() {
    return new Update();
  }

  /**
   * The "update" collection of methods.
   */
  public class Update {

    /**
     * Create a request for the method "update.location".
     *
     * This request holds the parameters needed by the the device server.  After setting any optional
     * parameters, call the {@link Location#execute()} method to invoke the remote operation.
     *
     * @param id
     * @param content the {@link com.appspot.xme_backend.device.model.Location}
     * @return the request
     */
    public Location location(java.lang.Long id, com.appspot.xme_backend.device.model.Location content) throws java.io.IOException {
      Location result = new Location(id, content);
      initialize(result);
      return result;
    }

    public class Location extends DeviceRequest<com.appspot.xme_backend.device.model.Message> {

      private static final String REST_PATH = "sendLocation/{id}";

      /**
       * Create a request for the method "update.location".
       *
       * This request holds the parameters needed by the the device server.  After setting any optional
       * parameters, call the {@link Location#execute()} method to invoke the remote operation. <p>
       * {@link
       * Location#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @param content the {@link com.appspot.xme_backend.device.model.Location}
       * @since 1.13
       */
      protected Location(java.lang.Long id, com.appspot.xme_backend.device.model.Location content) {
        super(Device.this, "POST", REST_PATH, content, com.appspot.xme_backend.device.model.Message.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Location setAlt(java.lang.String alt) {
        return (Location) super.setAlt(alt);
      }

      @Override
      public Location setFields(java.lang.String fields) {
        return (Location) super.setFields(fields);
      }

      @Override
      public Location setKey(java.lang.String key) {
        return (Location) super.setKey(key);
      }

      @Override
      public Location setOauthToken(java.lang.String oauthToken) {
        return (Location) super.setOauthToken(oauthToken);
      }

      @Override
      public Location setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Location) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Location setQuotaUser(java.lang.String quotaUser) {
        return (Location) super.setQuotaUser(quotaUser);
      }

      @Override
      public Location setUserIp(java.lang.String userIp) {
        return (Location) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long id;

      /**

       */
      public java.lang.Long getId() {
        return id;
      }

      public Location setId(java.lang.Long id) {
        this.id = id;
        return this;
      }

      @Override
      public Location set(String parameterName, Object value) {
        return (Location) super.set(parameterName, value);
      }
    }

  }

  /**
   * Create a request for the method "register".
   *
   * This request holds the parameters needed by the the device server.  After setting any optional
   * parameters, call the {@link Register#execute()} method to invoke the remote operation.
   *
   * @param token
   * @param content the {@link com.appspot.xme_backend.device.model.Device}
   * @return the request
   */
  public Register register(java.lang.String token, com.appspot.xme_backend.device.model.Device content) throws java.io.IOException {
    Register result = new Register(token, content);
    initialize(result);
    return result;
  }

  public class Register extends DeviceRequest<com.appspot.xme_backend.device.model.Message> {

    private static final String REST_PATH = "register/{token}";

    /**
     * Create a request for the method "register".
     *
     * This request holds the parameters needed by the the device server.  After setting any optional
     * parameters, call the {@link Register#execute()} method to invoke the remote operation. <p>
     * {@link
     * Register#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param token
     * @param content the {@link com.appspot.xme_backend.device.model.Device}
     * @since 1.13
     */
    protected Register(java.lang.String token, com.appspot.xme_backend.device.model.Device content) {
      super(Device.this, "POST", REST_PATH, content, com.appspot.xme_backend.device.model.Message.class);
      this.token = com.google.api.client.util.Preconditions.checkNotNull(token, "Required parameter token must be specified.");
    }

    @Override
    public Register setAlt(java.lang.String alt) {
      return (Register) super.setAlt(alt);
    }

    @Override
    public Register setFields(java.lang.String fields) {
      return (Register) super.setFields(fields);
    }

    @Override
    public Register setKey(java.lang.String key) {
      return (Register) super.setKey(key);
    }

    @Override
    public Register setOauthToken(java.lang.String oauthToken) {
      return (Register) super.setOauthToken(oauthToken);
    }

    @Override
    public Register setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Register) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Register setQuotaUser(java.lang.String quotaUser) {
      return (Register) super.setQuotaUser(quotaUser);
    }

    @Override
    public Register setUserIp(java.lang.String userIp) {
      return (Register) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String token;

    /**

     */
    public java.lang.String getToken() {
      return token;
    }

    public Register setToken(java.lang.String token) {
      this.token = token;
      return this;
    }

    @Override
    public Register set(String parameterName, Object value) {
      return (Register) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "subscribe".
   *
   * This request holds the parameters needed by the the device server.  After setting any optional
   * parameters, call the {@link Subscribe#execute()} method to invoke the remote operation.
   *
   * @param id
   * @param code
   * @return the request
   */
  public Subscribe subscribe(java.lang.Long id, java.lang.String code) throws java.io.IOException {
    Subscribe result = new Subscribe(id, code);
    initialize(result);
    return result;
  }

  public class Subscribe extends DeviceRequest<com.appspot.xme_backend.device.model.Message> {

    private static final String REST_PATH = "subscribe/{id}/{code}";

    /**
     * Create a request for the method "subscribe".
     *
     * This request holds the parameters needed by the the device server.  After setting any optional
     * parameters, call the {@link Subscribe#execute()} method to invoke the remote operation. <p>
     * {@link
     * Subscribe#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @param code
     * @since 1.13
     */
    protected Subscribe(java.lang.Long id, java.lang.String code) {
      super(Device.this, "POST", REST_PATH, null, com.appspot.xme_backend.device.model.Message.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      this.code = com.google.api.client.util.Preconditions.checkNotNull(code, "Required parameter code must be specified.");
    }

    @Override
    public Subscribe setAlt(java.lang.String alt) {
      return (Subscribe) super.setAlt(alt);
    }

    @Override
    public Subscribe setFields(java.lang.String fields) {
      return (Subscribe) super.setFields(fields);
    }

    @Override
    public Subscribe setKey(java.lang.String key) {
      return (Subscribe) super.setKey(key);
    }

    @Override
    public Subscribe setOauthToken(java.lang.String oauthToken) {
      return (Subscribe) super.setOauthToken(oauthToken);
    }

    @Override
    public Subscribe setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Subscribe) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Subscribe setQuotaUser(java.lang.String quotaUser) {
      return (Subscribe) super.setQuotaUser(quotaUser);
    }

    @Override
    public Subscribe setUserIp(java.lang.String userIp) {
      return (Subscribe) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public Subscribe setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String code;

    /**

     */
    public java.lang.String getCode() {
      return code;
    }

    public Subscribe setCode(java.lang.String code) {
      this.code = code;
      return this;
    }

    @Override
    public Subscribe set(String parameterName, Object value) {
      return (Subscribe) super.set(parameterName, value);
    }
  }

  /**
   * Builder for {@link Device}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link Device}. */
    @Override
    public Device build() {
      return new Device(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link DeviceRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setDeviceRequestInitializer(
        DeviceRequestInitializer deviceRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(deviceRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
